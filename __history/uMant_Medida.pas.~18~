unit uMant_Medida;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uBase_Mantenimiento, FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS,
  FireDAC.Phys.Intf, FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt,
  Datasnap.Provider, Datasnap.DBClient, Data.DB, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client, Vcl.StdCtrls, Vcl.ComCtrls, Vcl.Mask, Vcl.ExtCtrls;

type
  TfrMant_Medida = class(TfrBase_Mantenimiento)
    edDocumento: TLabeledEdit;
    FDQuery1id: TFDAutoIncField;
    FDQuery1Nombre: TStringField;
    FDQuery1Simbolo: TStringField;
    procedure btnCancelarClick(Sender: TObject);
    procedure edCodigoKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure edCodigoKeyPress(Sender: TObject; var Key: Char);
    procedure FDQuery1AfterOpen(DataSet: TDataSet);
    procedure edCodigoMouseEnter(Sender: TObject);
    procedure edCodigoMouseLeave(Sender: TObject);
    procedure btnActualizarClick(Sender: TObject);

  private
    { Private declarations }
    procedure IniPant;
    procedure CargoConsulta;
  public
    { Public declarations }
  end;

var
  frMant_Medida: TfrMant_Medida;

implementation

{$R *.dfm}
uses udm,uAyuda,uMensage;
{ TfrMant_Medida }

procedure TfrMant_Medida.btnActualizarClick(Sender: TObject);
var
  lOk : Boolean;
  nId : Integer;

begin
  inherited;

  lOk := ValDato(edDocumento);
  if not lOk then
  begin
    MsgError('NOMBRE NO PUEDE SER VACIO');
    edDocumento.SetFocus;
    Abort;
  end
  else
    lOk := ValDato(edDireccion);

  if not lOk then
  begin
    MsgError('SIMBOLO NO PUEDE SER VACIO');
    edDireccion.SetFocus;
    Abort;
  end;


  if lOk then
  begin
    Screen.Cursor := crHourGlass;
    TRY
      udm.con.MySQL.StartTransaction;
      TRY


        with udm.con.FDCommand1 do
        begin
          if FDQuery1.IsEmpty then
          begin
            nId := ProxId('medida');
            CommandText.Text := 'Insert medida ' +
                                '(id,Nombre,Simbolo) ' +
                                'Values ' +
                                '(:paId,:paNom,:paSim)';
          end
          else
          begin
            nId := FDQuery1id.AsInteger;
            CommandText.Text := 'Update medida ' +
                                'Set Nombre  = :paNom, ' +
                                '    Simbolo  = :paSim ' +
                                'Where id = :paId';
          end;

          ParamByName('paId').Value := nId;
          ParamByName('paNom').Value := edDocumento.Text;
          ParamByName('paSim').Value := edDireccion.Text;
          Execute;

        end;
        udm.con.MySQL.Commit;
        IniPant;
        MsgAviso('MEDIDA REGISTRADA');
      EXCEPT
        On E:Exception do
        begin
          udm.con.MySQL.Rollback;
          MsgError('NO SE PUDO GUARDAR LA MEDIDA.'+E.Message);
        end;
      END;
    FINALLY
      Screen.Cursor := crDefault;
    END;
  end;

end;

procedure TfrMant_Medida.btnCancelarClick(Sender: TObject);
begin
  inherited;

  IniPant;

end;

procedure TfrMant_Medida.CargoConsulta;
begin

  if edCodigo.Text<>'' then
    begin
      if qrOpen(FDQuery1,edCodigo) then
      begin
        HabMant(True);
        edDocumento.SetFocus;
      end
      else
      begin
        MsgError('CODIGO NO REGISTRADO');
        Abort;
      end;
    end
    else
    begin
      HabMant(True);
      edDocumento.SetFocus;
    end;

end;


procedure TfrMant_Medida.edCodigoKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  inherited;

  if key=112 then
    Ayuda('medida',edCodigo);


end;

procedure TfrMant_Medida.edCodigoKeyPress(Sender: TObject; var Key: Char);
begin
  inherited;

  if key=#13 then
  begin
    CargoConsulta;
  end;

end;


procedure TfrMant_Medida.edCodigoMouseEnter(Sender: TObject);
begin
  inherited;

 pnAyuda.Visible:=True;

end;


procedure TfrMant_Medida.edCodigoMouseLeave(Sender: TObject);
begin
  inherited;

   pnAyuda.Visible:=False;

end;

procedure TfrMant_Medida.FDQuery1AfterOpen(DataSet: TDataSet);
begin
  inherited;

  if not FDQuery1.IsEmpty then
  begin
    HabMant(True);
    edDocumento.Text := FDQuery1Nombre.AsString;
    edDireccion.Text := FDQuery1Simbolo.AsString;
    edDocumento.SetFocus;
  end
  else
    MsgAviso('CODIGO SIN REGISTRAR');

end;

procedure TfrMant_Medida.IniPant;
begin

  FDQuery1.Close;
  edDireccion.Clear;
  edDocumento.Clear;
  HabMant(False);
  edCodigo.SetFocus;

end;

end.
